[
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "tensorflow",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tensorflow",
        "description": "tensorflow",
        "detail": "tensorflow",
        "documentation": {}
    },
    {
        "label": "ast",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ast",
        "description": "ast",
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "cmudict",
        "importPath": "nltk.corpus",
        "description": "nltk.corpus",
        "isExtraImport": true,
        "detail": "nltk.corpus",
        "documentation": {}
    },
    {
        "label": "cmudict",
        "importPath": "nltk.corpus",
        "description": "nltk.corpus",
        "isExtraImport": true,
        "detail": "nltk.corpus",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "unicodedata",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unicodedata",
        "description": "unicodedata",
        "detail": "unicodedata",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "contractions",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "contractions",
        "description": "contractions",
        "detail": "contractions",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "num2words",
        "importPath": "num2words",
        "description": "num2words",
        "isExtraImport": true,
        "detail": "num2words",
        "documentation": {}
    },
    {
        "label": "js",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "js",
        "description": "js",
        "detail": "js",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "send_from_directory",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "send_from_directory",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "secure_filename",
        "importPath": "werkzeug.utils",
        "description": "werkzeug.utils",
        "isExtraImport": true,
        "detail": "werkzeug.utils",
        "documentation": {}
    },
    {
        "label": "secure_filename",
        "importPath": "werkzeug.utils",
        "description": "werkzeug.utils",
        "isExtraImport": true,
        "detail": "werkzeug.utils",
        "documentation": {}
    },
    {
        "label": "G2PConverter",
        "kind": 6,
        "importPath": "avatar_ui.TTS_pipeline.hybrid_G2P",
        "description": "avatar_ui.TTS_pipeline.hybrid_G2P",
        "peekOfCode": "class G2PConverter:\n    # def __init__(self, model_path=None, vocab_path=\"dataset/G2P_dataset/cmu_dict_no_stress.csv\", max_len=33, load_model=True):\n    # def __init__(self, model_path=None, vocab_path=\"dataset/G2P_dataset/cmu_dict_pun_stress.csv\", max_len=33, load_model=True):\n    def __init__(self, model_path=None, vocab_path=\"avatar_ui/TTS_pipeline/dataset/cmu_dict_with_stress.csv\", max_len=33, load_model=True):\n        self.max_len = max_len\n        self.phoneme_dict=cmudict.dict()\n        # print(self.phoneme_dict.keys())\n        if load_model and model_path:\n            self.model = tf.keras.models.load_model(model_path)\n        self._load_vocab(vocab_path)",
        "detail": "avatar_ui.TTS_pipeline.hybrid_G2P",
        "documentation": {}
    },
    {
        "label": "TextNormalizer",
        "kind": 6,
        "importPath": "avatar_ui.TTS_pipeline.text_preprocess",
        "description": "avatar_ui.TTS_pipeline.text_preprocess",
        "peekOfCode": "class TextNormalizer:\n    def __init__(self):\n        self.abbreviations = [(re.compile('\\\\b%s\\\\.' % x[0], re.IGNORECASE), x[1]) for x in [\n                ('mrs', 'misess'),\n                ('mr', 'mister'),\n                ('dr', 'doctor'),\n                ('drs', 'doctors'),\n                ('st', 'saint'),\n                ('co', 'company'),\n                ('jr', 'junior'),",
        "detail": "avatar_ui.TTS_pipeline.text_preprocess",
        "documentation": {}
    },
    {
        "label": "_pad",
        "kind": 5,
        "importPath": "avatar_ui.TTS_pipeline.text_preprocess",
        "description": "avatar_ui.TTS_pipeline.text_preprocess",
        "peekOfCode": "_pad = \"_\"\n_punctuation = \"!'(),.:;? \"\n_special = \"-\"\n_silences = [\"@sp\", \"@spn\", \"@sil\"]\nclass TextNormalizer:\n    def __init__(self):\n        self.abbreviations = [(re.compile('\\\\b%s\\\\.' % x[0], re.IGNORECASE), x[1]) for x in [\n                ('mrs', 'misess'),\n                ('mr', 'mister'),\n                ('dr', 'doctor'),",
        "detail": "avatar_ui.TTS_pipeline.text_preprocess",
        "documentation": {}
    },
    {
        "label": "_punctuation",
        "kind": 5,
        "importPath": "avatar_ui.TTS_pipeline.text_preprocess",
        "description": "avatar_ui.TTS_pipeline.text_preprocess",
        "peekOfCode": "_punctuation = \"!'(),.:;? \"\n_special = \"-\"\n_silences = [\"@sp\", \"@spn\", \"@sil\"]\nclass TextNormalizer:\n    def __init__(self):\n        self.abbreviations = [(re.compile('\\\\b%s\\\\.' % x[0], re.IGNORECASE), x[1]) for x in [\n                ('mrs', 'misess'),\n                ('mr', 'mister'),\n                ('dr', 'doctor'),\n                ('drs', 'doctors'),",
        "detail": "avatar_ui.TTS_pipeline.text_preprocess",
        "documentation": {}
    },
    {
        "label": "_special",
        "kind": 5,
        "importPath": "avatar_ui.TTS_pipeline.text_preprocess",
        "description": "avatar_ui.TTS_pipeline.text_preprocess",
        "peekOfCode": "_special = \"-\"\n_silences = [\"@sp\", \"@spn\", \"@sil\"]\nclass TextNormalizer:\n    def __init__(self):\n        self.abbreviations = [(re.compile('\\\\b%s\\\\.' % x[0], re.IGNORECASE), x[1]) for x in [\n                ('mrs', 'misess'),\n                ('mr', 'mister'),\n                ('dr', 'doctor'),\n                ('drs', 'doctors'),\n                ('st', 'saint'),",
        "detail": "avatar_ui.TTS_pipeline.text_preprocess",
        "documentation": {}
    },
    {
        "label": "_silences",
        "kind": 5,
        "importPath": "avatar_ui.TTS_pipeline.text_preprocess",
        "description": "avatar_ui.TTS_pipeline.text_preprocess",
        "peekOfCode": "_silences = [\"@sp\", \"@spn\", \"@sil\"]\nclass TextNormalizer:\n    def __init__(self):\n        self.abbreviations = [(re.compile('\\\\b%s\\\\.' % x[0], re.IGNORECASE), x[1]) for x in [\n                ('mrs', 'misess'),\n                ('mr', 'mister'),\n                ('dr', 'doctor'),\n                ('drs', 'doctors'),\n                ('st', 'saint'),\n                ('co', 'company'),",
        "detail": "avatar_ui.TTS_pipeline.text_preprocess",
        "documentation": {}
    },
    {
        "label": "update_info",
        "kind": 2,
        "importPath": "avatar_ui.static.py.STT",
        "description": "avatar_ui.static.py.STT",
        "peekOfCode": "def update_info(message):\n    \"\"\"Helper function to update the info div in HTML.\"\"\"\n    info_div = js.document.getElementById('info')\n    if info_div:\n        info_div.textContent = message\n    else:\n        print(f\"Python Warning: Could not find #info div. Message: {message}\")\nasync def handle_mic_click(event=None):\n    \"\"\"\n    Handles the mic button click event to start/stop speech recognition.",
        "detail": "avatar_ui.static.py.STT",
        "documentation": {}
    },
    {
        "label": "smooth_scroll_to_bottom",
        "kind": 2,
        "importPath": "avatar_ui.static.py.STT",
        "description": "avatar_ui.static.py.STT",
        "peekOfCode": "def smooth_scroll_to_bottom(element):\n    \"\"\"Calls the JavaScript smoothScrollToBottom function.\"\"\"\n    js.window.smoothScrollToBottom(element) # Call the JS function\nasync def py_sendMessage(event=None): # event=None to accept JS event object if passed\n    \"\"\"\n    Handles sending and displaying chat messages in the chat interface.\n    This function replaces the original JavaScript sendMessage.\n    \"\"\"\n    input_element = js.document.getElementById('userInput')\n    message = input_element.value.strip()",
        "detail": "avatar_ui.static.py.STT",
        "documentation": {}
    },
    {
        "label": "speech_recognition_active",
        "kind": 5,
        "importPath": "avatar_ui.static.py.STT",
        "description": "avatar_ui.static.py.STT",
        "peekOfCode": "speech_recognition_active = False\ndef update_info(message):\n    \"\"\"Helper function to update the info div in HTML.\"\"\"\n    info_div = js.document.getElementById('info')\n    if info_div:\n        info_div.textContent = message\n    else:\n        print(f\"Python Warning: Could not find #info div. Message: {message}\")\nasync def handle_mic_click(event=None):\n    \"\"\"",
        "detail": "avatar_ui.static.py.STT",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "avatar_ui.app",
        "description": "avatar_ui.app",
        "peekOfCode": "def index():\n    return render_template('index.html', avatars=avatars)\nSTATIC_FOLDER = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static')\napp.config['STATIC_FOLDER'] = STATIC_FOLDER\n@app.route('/static/models/<path:filename>')\ndef serve_model(filename):\n    print(f\"Serving model file: {filename}\")\n    return send_from_directory(os.path.join(STATIC_FOLDER, 'models'), filename)\n@app.route('/upload', methods=['POST'])\ndef upload():",
        "detail": "avatar_ui.app",
        "documentation": {}
    },
    {
        "label": "serve_model",
        "kind": 2,
        "importPath": "avatar_ui.app",
        "description": "avatar_ui.app",
        "peekOfCode": "def serve_model(filename):\n    print(f\"Serving model file: {filename}\")\n    return send_from_directory(os.path.join(STATIC_FOLDER, 'models'), filename)\n@app.route('/upload', methods=['POST'])\ndef upload():\n    image = request.files['image']\n    avatar_name = request.form['avatar_name']\n    if image:\n        filename = secure_filename(image.filename)\n        image.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))",
        "detail": "avatar_ui.app",
        "documentation": {}
    },
    {
        "label": "upload",
        "kind": 2,
        "importPath": "avatar_ui.app",
        "description": "avatar_ui.app",
        "peekOfCode": "def upload():\n    image = request.files['image']\n    avatar_name = request.form['avatar_name']\n    if image:\n        filename = secure_filename(image.filename)\n        image.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))\n        avatar_url = url_for('static', filename=f'uploads/{filename}')\n        avatars.append({'name': avatar_name, 'url': avatar_url})\n    return redirect(url_for('index'))\nif __name__ == '__main__':",
        "detail": "avatar_ui.app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "avatar_ui.app",
        "description": "avatar_ui.app",
        "peekOfCode": "def index():\n    return render_template('index.html', uploaded_image=None)\n@app.route('/upload', methods=['POST'])\ndef upload():\n    if 'image' not in request.files:\n        return \"No file part\", 400\n    img = request.files['image']\n    print(img)\n    if img.filename == '':\n        return \"No selected file\", 400",
        "detail": "avatar_ui.app",
        "documentation": {}
    },
    {
        "label": "upload",
        "kind": 2,
        "importPath": "avatar_ui.app",
        "description": "avatar_ui.app",
        "peekOfCode": "def upload():\n    if 'image' not in request.files:\n        return \"No file part\", 400\n    img = request.files['image']\n    print(img)\n    if img.filename == '':\n        return \"No selected file\", 400\n    img_path = os.path.join(app.config['UPLOAD_FOLDER'], img.filename)\n    try:\n        img.save(img_path)",
        "detail": "avatar_ui.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "avatar_ui.app",
        "description": "avatar_ui.app",
        "peekOfCode": "app = Flask(__name__)\nUPLOAD_FOLDER = 'avatar_ui/static/uploads'\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n# Get all uploaded avatars and their names\navatars = []\n@app.route('/')\ndef index():\n    return render_template('index.html', avatars=avatars)\nSTATIC_FOLDER = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static')",
        "detail": "avatar_ui.app",
        "documentation": {}
    },
    {
        "label": "UPLOAD_FOLDER",
        "kind": 5,
        "importPath": "avatar_ui.app",
        "description": "avatar_ui.app",
        "peekOfCode": "UPLOAD_FOLDER = 'avatar_ui/static/uploads'\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n# Get all uploaded avatars and their names\navatars = []\n@app.route('/')\ndef index():\n    return render_template('index.html', avatars=avatars)\nSTATIC_FOLDER = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static')\napp.config['STATIC_FOLDER'] = STATIC_FOLDER",
        "detail": "avatar_ui.app",
        "documentation": {}
    },
    {
        "label": "app.config['UPLOAD_FOLDER']",
        "kind": 5,
        "importPath": "avatar_ui.app",
        "description": "avatar_ui.app",
        "peekOfCode": "app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n# Get all uploaded avatars and their names\navatars = []\n@app.route('/')\ndef index():\n    return render_template('index.html', avatars=avatars)\nSTATIC_FOLDER = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static')\napp.config['STATIC_FOLDER'] = STATIC_FOLDER\n@app.route('/static/models/<path:filename>')\ndef serve_model(filename):",
        "detail": "avatar_ui.app",
        "documentation": {}
    },
    {
        "label": "avatars",
        "kind": 5,
        "importPath": "avatar_ui.app",
        "description": "avatar_ui.app",
        "peekOfCode": "avatars = []\n@app.route('/')\ndef index():\n    return render_template('index.html', avatars=avatars)\nSTATIC_FOLDER = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static')\napp.config['STATIC_FOLDER'] = STATIC_FOLDER\n@app.route('/static/models/<path:filename>')\ndef serve_model(filename):\n    print(f\"Serving model file: {filename}\")\n    return send_from_directory(os.path.join(STATIC_FOLDER, 'models'), filename)",
        "detail": "avatar_ui.app",
        "documentation": {}
    },
    {
        "label": "STATIC_FOLDER",
        "kind": 5,
        "importPath": "avatar_ui.app",
        "description": "avatar_ui.app",
        "peekOfCode": "STATIC_FOLDER = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static')\napp.config['STATIC_FOLDER'] = STATIC_FOLDER\n@app.route('/static/models/<path:filename>')\ndef serve_model(filename):\n    print(f\"Serving model file: {filename}\")\n    return send_from_directory(os.path.join(STATIC_FOLDER, 'models'), filename)\n@app.route('/upload', methods=['POST'])\ndef upload():\n    image = request.files['image']\n    avatar_name = request.form['avatar_name']",
        "detail": "avatar_ui.app",
        "documentation": {}
    },
    {
        "label": "app.config['STATIC_FOLDER']",
        "kind": 5,
        "importPath": "avatar_ui.app",
        "description": "avatar_ui.app",
        "peekOfCode": "app.config['STATIC_FOLDER'] = STATIC_FOLDER\n@app.route('/static/models/<path:filename>')\ndef serve_model(filename):\n    print(f\"Serving model file: {filename}\")\n    return send_from_directory(os.path.join(STATIC_FOLDER, 'models'), filename)\n@app.route('/upload', methods=['POST'])\ndef upload():\n    image = request.files['image']\n    avatar_name = request.form['avatar_name']\n    if image:",
        "detail": "avatar_ui.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "avatar_ui.app",
        "description": "avatar_ui.app",
        "peekOfCode": "app = Flask(__name__)\nUPLOAD_FOLDER = 'avatar_ui/static/uploads'\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n@app.route('/')\ndef index():\n    return render_template('index.html', uploaded_image=None)\n@app.route('/upload', methods=['POST'])\ndef upload():\n    if 'image' not in request.files:",
        "detail": "avatar_ui.app",
        "documentation": {}
    },
    {
        "label": "UPLOAD_FOLDER",
        "kind": 5,
        "importPath": "avatar_ui.app",
        "description": "avatar_ui.app",
        "peekOfCode": "UPLOAD_FOLDER = 'avatar_ui/static/uploads'\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n@app.route('/')\ndef index():\n    return render_template('index.html', uploaded_image=None)\n@app.route('/upload', methods=['POST'])\ndef upload():\n    if 'image' not in request.files:\n        return \"No file part\", 400",
        "detail": "avatar_ui.app",
        "documentation": {}
    },
    {
        "label": "app.config['UPLOAD_FOLDER']",
        "kind": 5,
        "importPath": "avatar_ui.app",
        "description": "avatar_ui.app",
        "peekOfCode": "app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n@app.route('/')\ndef index():\n    return render_template('index.html', uploaded_image=None)\n@app.route('/upload', methods=['POST'])\ndef upload():\n    if 'image' not in request.files:\n        return \"No file part\", 400\n    img = request.files['image']\n    print(img)",
        "detail": "avatar_ui.app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "avatar_ui.app_render3d",
        "description": "avatar_ui.app_render3d",
        "peekOfCode": "def index():\n    return render_template('index1.html',avatars=avatars)\nSTATIC_FOLDER = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static')\napp.config['STATIC_FOLDER'] = STATIC_FOLDER\nos.makedirs(os.path.join(STATIC_FOLDER, 'models'), exist_ok=True)\n# This route serves ANY file from the static/models subdirectory, including .glb\n@app.route('/static/models/<path:filename>')\ndef serve_model(filename):\n    print(f\"Serving model file: {filename}\")\n    return send_from_directory(os.path.join(STATIC_FOLDER, 'models'), filename)",
        "detail": "avatar_ui.app_render3d",
        "documentation": {}
    },
    {
        "label": "serve_model",
        "kind": 2,
        "importPath": "avatar_ui.app_render3d",
        "description": "avatar_ui.app_render3d",
        "peekOfCode": "def serve_model(filename):\n    print(f\"Serving model file: {filename}\")\n    return send_from_directory(os.path.join(STATIC_FOLDER, 'models'), filename)\n@app.route('/upload', methods=['POST'])\ndef upload():\n    image = request.files['image']\n    avatar_name = request.form['avatar_name']\n    if image:\n        filename = secure_filename(image.filename)\n        image.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))",
        "detail": "avatar_ui.app_render3d",
        "documentation": {}
    },
    {
        "label": "upload",
        "kind": 2,
        "importPath": "avatar_ui.app_render3d",
        "description": "avatar_ui.app_render3d",
        "peekOfCode": "def upload():\n    image = request.files['image']\n    avatar_name = request.form['avatar_name']\n    if image:\n        filename = secure_filename(image.filename)\n        image.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))\n        avatar_url = url_for('static', filename=f'uploads/{filename}')\n        avatars.append({'name': avatar_name, 'url': avatar_url})\n    return redirect(url_for('index'))\nif __name__ == '__main__':",
        "detail": "avatar_ui.app_render3d",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "avatar_ui.app_render3d",
        "description": "avatar_ui.app_render3d",
        "peekOfCode": "app = Flask(__name__)\nUPLOAD_FOLDER = 'avatar_ui/static/uploads'\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n# Get all uploaded avatars and their names\navatars = []\n@app.route('/')\ndef index():\n    return render_template('index1.html',avatars=avatars)\nSTATIC_FOLDER = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static')",
        "detail": "avatar_ui.app_render3d",
        "documentation": {}
    },
    {
        "label": "UPLOAD_FOLDER",
        "kind": 5,
        "importPath": "avatar_ui.app_render3d",
        "description": "avatar_ui.app_render3d",
        "peekOfCode": "UPLOAD_FOLDER = 'avatar_ui/static/uploads'\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n# Get all uploaded avatars and their names\navatars = []\n@app.route('/')\ndef index():\n    return render_template('index1.html',avatars=avatars)\nSTATIC_FOLDER = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static')\napp.config['STATIC_FOLDER'] = STATIC_FOLDER",
        "detail": "avatar_ui.app_render3d",
        "documentation": {}
    },
    {
        "label": "app.config['UPLOAD_FOLDER']",
        "kind": 5,
        "importPath": "avatar_ui.app_render3d",
        "description": "avatar_ui.app_render3d",
        "peekOfCode": "app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n# Get all uploaded avatars and their names\navatars = []\n@app.route('/')\ndef index():\n    return render_template('index1.html',avatars=avatars)\nSTATIC_FOLDER = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static')\napp.config['STATIC_FOLDER'] = STATIC_FOLDER\nos.makedirs(os.path.join(STATIC_FOLDER, 'models'), exist_ok=True)\n# This route serves ANY file from the static/models subdirectory, including .glb",
        "detail": "avatar_ui.app_render3d",
        "documentation": {}
    },
    {
        "label": "avatars",
        "kind": 5,
        "importPath": "avatar_ui.app_render3d",
        "description": "avatar_ui.app_render3d",
        "peekOfCode": "avatars = []\n@app.route('/')\ndef index():\n    return render_template('index1.html',avatars=avatars)\nSTATIC_FOLDER = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static')\napp.config['STATIC_FOLDER'] = STATIC_FOLDER\nos.makedirs(os.path.join(STATIC_FOLDER, 'models'), exist_ok=True)\n# This route serves ANY file from the static/models subdirectory, including .glb\n@app.route('/static/models/<path:filename>')\ndef serve_model(filename):",
        "detail": "avatar_ui.app_render3d",
        "documentation": {}
    },
    {
        "label": "STATIC_FOLDER",
        "kind": 5,
        "importPath": "avatar_ui.app_render3d",
        "description": "avatar_ui.app_render3d",
        "peekOfCode": "STATIC_FOLDER = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static')\napp.config['STATIC_FOLDER'] = STATIC_FOLDER\nos.makedirs(os.path.join(STATIC_FOLDER, 'models'), exist_ok=True)\n# This route serves ANY file from the static/models subdirectory, including .glb\n@app.route('/static/models/<path:filename>')\ndef serve_model(filename):\n    print(f\"Serving model file: {filename}\")\n    return send_from_directory(os.path.join(STATIC_FOLDER, 'models'), filename)\n@app.route('/upload', methods=['POST'])\ndef upload():",
        "detail": "avatar_ui.app_render3d",
        "documentation": {}
    },
    {
        "label": "app.config['STATIC_FOLDER']",
        "kind": 5,
        "importPath": "avatar_ui.app_render3d",
        "description": "avatar_ui.app_render3d",
        "peekOfCode": "app.config['STATIC_FOLDER'] = STATIC_FOLDER\nos.makedirs(os.path.join(STATIC_FOLDER, 'models'), exist_ok=True)\n# This route serves ANY file from the static/models subdirectory, including .glb\n@app.route('/static/models/<path:filename>')\ndef serve_model(filename):\n    print(f\"Serving model file: {filename}\")\n    return send_from_directory(os.path.join(STATIC_FOLDER, 'models'), filename)\n@app.route('/upload', methods=['POST'])\ndef upload():\n    image = request.files['image']",
        "detail": "avatar_ui.app_render3d",
        "documentation": {}
    }
]