[
    {
        "label": "pyttsx3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyttsx3",
        "description": "pyttsx3",
        "detail": "pyttsx3",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "tensorflow",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tensorflow",
        "description": "tensorflow",
        "detail": "tensorflow",
        "documentation": {}
    },
    {
        "label": "ast",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ast",
        "description": "ast",
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "cmudict",
        "importPath": "nltk.corpus",
        "description": "nltk.corpus",
        "isExtraImport": true,
        "detail": "nltk.corpus",
        "documentation": {}
    },
    {
        "label": "cmudict",
        "importPath": "nltk.corpus",
        "description": "nltk.corpus",
        "isExtraImport": true,
        "detail": "nltk.corpus",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "unicodedata",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unicodedata",
        "description": "unicodedata",
        "detail": "unicodedata",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "contractions",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "contractions",
        "description": "contractions",
        "detail": "contractions",
        "documentation": {}
    },
    {
        "label": "num2words",
        "importPath": "num2words",
        "description": "num2words",
        "isExtraImport": true,
        "detail": "num2words",
        "documentation": {}
    },
    {
        "label": "js",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "js",
        "description": "js",
        "detail": "js",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "send_from_directory",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "send_from_directory",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "secure_filename",
        "importPath": "werkzeug.utils",
        "description": "werkzeug.utils",
        "isExtraImport": true,
        "detail": "werkzeug.utils",
        "documentation": {}
    },
    {
        "label": "secure_filename",
        "importPath": "werkzeug.utils",
        "description": "werkzeug.utils",
        "isExtraImport": true,
        "detail": "werkzeug.utils",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "chromadb",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "chromadb",
        "description": "chromadb",
        "detail": "chromadb",
        "documentation": {}
    },
    {
        "label": "Chroma",
        "importPath": "langchain_community.vectorstores",
        "description": "langchain_community.vectorstores",
        "isExtraImport": true,
        "detail": "langchain_community.vectorstores",
        "documentation": {}
    },
    {
        "label": "HuggingFaceEmbeddings",
        "importPath": "langchain_community.embeddings",
        "description": "langchain_community.embeddings",
        "isExtraImport": true,
        "detail": "langchain_community.embeddings",
        "documentation": {}
    },
    {
        "label": "Llama",
        "importPath": "llama_cpp",
        "description": "llama_cpp",
        "isExtraImport": true,
        "detail": "llama_cpp",
        "documentation": {}
    },
    {
        "label": "Settings",
        "importPath": "chromadb.config",
        "description": "chromadb.config",
        "isExtraImport": true,
        "detail": "chromadb.config",
        "documentation": {}
    },
    {
        "label": "PyTTSx3Service",
        "kind": 6,
        "importPath": "avatar_ui.TTS_pipeline.TTS_inference",
        "description": "avatar_ui.TTS_pipeline.TTS_inference",
        "peekOfCode": "class PyTTSx3Service:\n    def __init__(self):\n        self.engine = None\n        self.is_loaded = False\n        self._initialize_engine() # Initialize the engine on startup\n    def _initialize_engine(self):\n        \"\"\"Initializes the pyttsx3 engine.\"\"\"\n        try:\n            print(\"PyTTSx3Service: Initializing pyttsx3 engine...\")\n            self.engine = pyttsx3.init()",
        "detail": "avatar_ui.TTS_pipeline.TTS_inference",
        "documentation": {}
    },
    {
        "label": "tts_service_instance",
        "kind": 5,
        "importPath": "avatar_ui.TTS_pipeline.TTS_inference",
        "description": "avatar_ui.TTS_pipeline.TTS_inference",
        "peekOfCode": "tts_service_instance = PyTTSx3Service()\n# Optional: You can check if it loaded successfully\nif not tts_service_instance.is_loaded:\n    print(\"PyTTSx3Service: WARNING: PyTTSx3 engine failed to load during initialization.\")",
        "detail": "avatar_ui.TTS_pipeline.TTS_inference",
        "documentation": {}
    },
    {
        "label": "G2PConverter",
        "kind": 6,
        "importPath": "avatar_ui.TTS_pipeline.hybrid_G2P",
        "description": "avatar_ui.TTS_pipeline.hybrid_G2P",
        "peekOfCode": "class G2PConverter:\n    # def __init__(self, model_path=None, vocab_path=\"dataset/G2P_dataset/cmu_dict_no_stress.csv\", max_len=33, load_model=True):\n    # def __init__(self, model_path=None, vocab_path=\"dataset/G2P_dataset/cmu_dict_pun_stress.csv\", max_len=33, load_model=True):\n    def __init__(self, model_path=None, vocab_path=\"avatar_ui/TTS_pipeline/dataset/cmu_dict_with_stress.csv\", max_len=33, load_model=True):\n        self.max_len = max_len\n        self.phoneme_dict=cmudict.dict()\n        # print(self.phoneme_dict.keys())\n        if load_model and model_path:\n            self.model = tf.keras.models.load_model(model_path)\n        self._load_vocab(vocab_path)",
        "detail": "avatar_ui.TTS_pipeline.hybrid_G2P",
        "documentation": {}
    },
    {
        "label": "TextNormalizer",
        "kind": 6,
        "importPath": "avatar_ui.TTS_pipeline.text_preprocess",
        "description": "avatar_ui.TTS_pipeline.text_preprocess",
        "peekOfCode": "class TextNormalizer:\n    def __init__(self):\n        self.abbreviations = [(re.compile('\\\\b%s\\\\.' % x[0], re.IGNORECASE), x[1]) for x in [\n                ('mrs', 'misess'),\n                ('mr', 'mister'),\n                ('dr', 'doctor'),\n                ('drs', 'doctors'),\n                ('st', 'saint'),\n                ('co', 'company'),\n                ('jr', 'junior'),",
        "detail": "avatar_ui.TTS_pipeline.text_preprocess",
        "documentation": {}
    },
    {
        "label": "_pad",
        "kind": 5,
        "importPath": "avatar_ui.TTS_pipeline.text_preprocess",
        "description": "avatar_ui.TTS_pipeline.text_preprocess",
        "peekOfCode": "_pad = \"_\"\n_punctuation = \"!'(),.:;? \"\n_special = \"-\"\n_silences = [\"@sp\", \"@spn\", \"@sil\"]\nclass TextNormalizer:\n    def __init__(self):\n        self.abbreviations = [(re.compile('\\\\b%s\\\\.' % x[0], re.IGNORECASE), x[1]) for x in [\n                ('mrs', 'misess'),\n                ('mr', 'mister'),\n                ('dr', 'doctor'),",
        "detail": "avatar_ui.TTS_pipeline.text_preprocess",
        "documentation": {}
    },
    {
        "label": "_punctuation",
        "kind": 5,
        "importPath": "avatar_ui.TTS_pipeline.text_preprocess",
        "description": "avatar_ui.TTS_pipeline.text_preprocess",
        "peekOfCode": "_punctuation = \"!'(),.:;? \"\n_special = \"-\"\n_silences = [\"@sp\", \"@spn\", \"@sil\"]\nclass TextNormalizer:\n    def __init__(self):\n        self.abbreviations = [(re.compile('\\\\b%s\\\\.' % x[0], re.IGNORECASE), x[1]) for x in [\n                ('mrs', 'misess'),\n                ('mr', 'mister'),\n                ('dr', 'doctor'),\n                ('drs', 'doctors'),",
        "detail": "avatar_ui.TTS_pipeline.text_preprocess",
        "documentation": {}
    },
    {
        "label": "_special",
        "kind": 5,
        "importPath": "avatar_ui.TTS_pipeline.text_preprocess",
        "description": "avatar_ui.TTS_pipeline.text_preprocess",
        "peekOfCode": "_special = \"-\"\n_silences = [\"@sp\", \"@spn\", \"@sil\"]\nclass TextNormalizer:\n    def __init__(self):\n        self.abbreviations = [(re.compile('\\\\b%s\\\\.' % x[0], re.IGNORECASE), x[1]) for x in [\n                ('mrs', 'misess'),\n                ('mr', 'mister'),\n                ('dr', 'doctor'),\n                ('drs', 'doctors'),\n                ('st', 'saint'),",
        "detail": "avatar_ui.TTS_pipeline.text_preprocess",
        "documentation": {}
    },
    {
        "label": "_silences",
        "kind": 5,
        "importPath": "avatar_ui.TTS_pipeline.text_preprocess",
        "description": "avatar_ui.TTS_pipeline.text_preprocess",
        "peekOfCode": "_silences = [\"@sp\", \"@spn\", \"@sil\"]\nclass TextNormalizer:\n    def __init__(self):\n        self.abbreviations = [(re.compile('\\\\b%s\\\\.' % x[0], re.IGNORECASE), x[1]) for x in [\n                ('mrs', 'misess'),\n                ('mr', 'mister'),\n                ('dr', 'doctor'),\n                ('drs', 'doctors'),\n                ('st', 'saint'),\n                ('co', 'company'),",
        "detail": "avatar_ui.TTS_pipeline.text_preprocess",
        "documentation": {}
    },
    {
        "label": "update_info",
        "kind": 2,
        "importPath": "avatar_ui.static.py.STT",
        "description": "avatar_ui.static.py.STT",
        "peekOfCode": "def update_info(message):\n    \"\"\"Helper function to update the info div in HTML.\"\"\"\n    info_div = js.document.getElementById('info')\n    if info_div:\n        info_div.textContent = message\n    else:\n        print(f\"Python Warning: Could not find #info div. Message: {message}\")\nasync def handle_mic_click(event=None):\n    \"\"\"\n    Handles the mic button click event to start/stop speech recognition.",
        "detail": "avatar_ui.static.py.STT",
        "documentation": {}
    },
    {
        "label": "smooth_scroll_to_bottom",
        "kind": 2,
        "importPath": "avatar_ui.static.py.STT",
        "description": "avatar_ui.static.py.STT",
        "peekOfCode": "def smooth_scroll_to_bottom(element):\n    \"\"\"Calls the JavaScript smoothScrollToBottom function.\"\"\"\n    js.window.smoothScrollToBottom(element) # Call the JS function\nasync def get_bot_response(user_message):\n    \"\"\"\n    Simulates getting a response from a bot.\n    In a real application, this would involve an HTTP request to a backend API.\n    For now, a simple conditional response.\n    \"\"\"\n    print(f\"Python: Getting bot response for: '{user_message}'\")",
        "detail": "avatar_ui.static.py.STT",
        "documentation": {}
    },
    {
        "label": "py_speak_text",
        "kind": 2,
        "importPath": "avatar_ui.static.py.STT",
        "description": "avatar_ui.static.py.STT",
        "peekOfCode": "def py_speak_text(text):\n    global current_py_utterance \n    if not text or text.strip() == '':\n        print('Python TTS: Attempted to speak empty or null text.')\n        return\n    if not hasattr(js.window, 'speechSynthesis'):\n        print('Python TTS: Text-to-Speech not supported in this browser.')\n        update_info('Text-to-Speech not supported in your browser.')\n        return\n    # # Cancel any currently speaking utterance",
        "detail": "avatar_ui.static.py.STT",
        "documentation": {}
    },
    {
        "label": "speech_recognition_active",
        "kind": 5,
        "importPath": "avatar_ui.static.py.STT",
        "description": "avatar_ui.static.py.STT",
        "peekOfCode": "speech_recognition_active = False\ncurrent_py_utterance = None\ndef update_info(message):\n    \"\"\"Helper function to update the info div in HTML.\"\"\"\n    info_div = js.document.getElementById('info')\n    if info_div:\n        info_div.textContent = message\n    else:\n        print(f\"Python Warning: Could not find #info div. Message: {message}\")\nasync def handle_mic_click(event=None):",
        "detail": "avatar_ui.static.py.STT",
        "documentation": {}
    },
    {
        "label": "current_py_utterance",
        "kind": 5,
        "importPath": "avatar_ui.static.py.STT",
        "description": "avatar_ui.static.py.STT",
        "peekOfCode": "current_py_utterance = None\ndef update_info(message):\n    \"\"\"Helper function to update the info div in HTML.\"\"\"\n    info_div = js.document.getElementById('info')\n    if info_div:\n        info_div.textContent = message\n    else:\n        print(f\"Python Warning: Could not find #info div. Message: {message}\")\nasync def handle_mic_click(event=None):\n    \"\"\"",
        "detail": "avatar_ui.static.py.STT",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "avatar_ui.app",
        "description": "avatar_ui.app",
        "peekOfCode": "def index():\n    return render_template('index.html', avatars=avatars)\nSTATIC_FOLDER = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static')\napp.config['STATIC_FOLDER'] = STATIC_FOLDER\n@app.route('/static/models/<path:filename>')\ndef serve_model(filename):\n    print(f\"Serving model file: {filename}\")\n    return send_from_directory(os.path.join(STATIC_FOLDER, 'models'), filename)\n@app.route('/upload', methods=['POST'])\ndef upload():",
        "detail": "avatar_ui.app",
        "documentation": {}
    },
    {
        "label": "serve_model",
        "kind": 2,
        "importPath": "avatar_ui.app",
        "description": "avatar_ui.app",
        "peekOfCode": "def serve_model(filename):\n    print(f\"Serving model file: {filename}\")\n    return send_from_directory(os.path.join(STATIC_FOLDER, 'models'), filename)\n@app.route('/upload', methods=['POST'])\ndef upload():\n    image = request.files['image']\n    avatar_name = request.form['avatar_name']\n    if image:\n        filename = secure_filename(image.filename)\n        image.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))",
        "detail": "avatar_ui.app",
        "documentation": {}
    },
    {
        "label": "upload",
        "kind": 2,
        "importPath": "avatar_ui.app",
        "description": "avatar_ui.app",
        "peekOfCode": "def upload():\n    image = request.files['image']\n    avatar_name = request.form['avatar_name']\n    if image:\n        filename = secure_filename(image.filename)\n        image.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))\n        avatar_url = url_for('static', filename=f'uploads/{filename}')\n        avatars.append({'name': avatar_name, 'url': avatar_url})\n    return redirect(url_for('index'))\nif __name__ == '__main__':",
        "detail": "avatar_ui.app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "avatar_ui.app",
        "description": "avatar_ui.app",
        "peekOfCode": "def index():\n    return render_template('index.html', uploaded_image=None)\n@app.route('/upload', methods=['POST'])\ndef upload():\n    if 'image' not in request.files:\n        return \"No file part\", 400\n    img = request.files['image']\n    print(img)\n    if img.filename == '':\n        return \"No selected file\", 400",
        "detail": "avatar_ui.app",
        "documentation": {}
    },
    {
        "label": "upload",
        "kind": 2,
        "importPath": "avatar_ui.app",
        "description": "avatar_ui.app",
        "peekOfCode": "def upload():\n    if 'image' not in request.files:\n        return \"No file part\", 400\n    img = request.files['image']\n    print(img)\n    if img.filename == '':\n        return \"No selected file\", 400\n    img_path = os.path.join(app.config['UPLOAD_FOLDER'], img.filename)\n    try:\n        img.save(img_path)",
        "detail": "avatar_ui.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "avatar_ui.app",
        "description": "avatar_ui.app",
        "peekOfCode": "app = Flask(__name__)\nUPLOAD_FOLDER = 'avatar_ui/static/uploads'\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n# Get all uploaded avatars and their names\navatars = []\n@app.route('/')\ndef index():\n    return render_template('index.html', avatars=avatars)\nSTATIC_FOLDER = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static')",
        "detail": "avatar_ui.app",
        "documentation": {}
    },
    {
        "label": "UPLOAD_FOLDER",
        "kind": 5,
        "importPath": "avatar_ui.app",
        "description": "avatar_ui.app",
        "peekOfCode": "UPLOAD_FOLDER = 'avatar_ui/static/uploads'\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n# Get all uploaded avatars and their names\navatars = []\n@app.route('/')\ndef index():\n    return render_template('index.html', avatars=avatars)\nSTATIC_FOLDER = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static')\napp.config['STATIC_FOLDER'] = STATIC_FOLDER",
        "detail": "avatar_ui.app",
        "documentation": {}
    },
    {
        "label": "app.config['UPLOAD_FOLDER']",
        "kind": 5,
        "importPath": "avatar_ui.app",
        "description": "avatar_ui.app",
        "peekOfCode": "app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n# Get all uploaded avatars and their names\navatars = []\n@app.route('/')\ndef index():\n    return render_template('index.html', avatars=avatars)\nSTATIC_FOLDER = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static')\napp.config['STATIC_FOLDER'] = STATIC_FOLDER\n@app.route('/static/models/<path:filename>')\ndef serve_model(filename):",
        "detail": "avatar_ui.app",
        "documentation": {}
    },
    {
        "label": "avatars",
        "kind": 5,
        "importPath": "avatar_ui.app",
        "description": "avatar_ui.app",
        "peekOfCode": "avatars = []\n@app.route('/')\ndef index():\n    return render_template('index.html', avatars=avatars)\nSTATIC_FOLDER = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static')\napp.config['STATIC_FOLDER'] = STATIC_FOLDER\n@app.route('/static/models/<path:filename>')\ndef serve_model(filename):\n    print(f\"Serving model file: {filename}\")\n    return send_from_directory(os.path.join(STATIC_FOLDER, 'models'), filename)",
        "detail": "avatar_ui.app",
        "documentation": {}
    },
    {
        "label": "STATIC_FOLDER",
        "kind": 5,
        "importPath": "avatar_ui.app",
        "description": "avatar_ui.app",
        "peekOfCode": "STATIC_FOLDER = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static')\napp.config['STATIC_FOLDER'] = STATIC_FOLDER\n@app.route('/static/models/<path:filename>')\ndef serve_model(filename):\n    print(f\"Serving model file: {filename}\")\n    return send_from_directory(os.path.join(STATIC_FOLDER, 'models'), filename)\n@app.route('/upload', methods=['POST'])\ndef upload():\n    image = request.files['image']\n    avatar_name = request.form['avatar_name']",
        "detail": "avatar_ui.app",
        "documentation": {}
    },
    {
        "label": "app.config['STATIC_FOLDER']",
        "kind": 5,
        "importPath": "avatar_ui.app",
        "description": "avatar_ui.app",
        "peekOfCode": "app.config['STATIC_FOLDER'] = STATIC_FOLDER\n@app.route('/static/models/<path:filename>')\ndef serve_model(filename):\n    print(f\"Serving model file: {filename}\")\n    return send_from_directory(os.path.join(STATIC_FOLDER, 'models'), filename)\n@app.route('/upload', methods=['POST'])\ndef upload():\n    image = request.files['image']\n    avatar_name = request.form['avatar_name']\n    if image:",
        "detail": "avatar_ui.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "avatar_ui.app",
        "description": "avatar_ui.app",
        "peekOfCode": "app = Flask(__name__)\nUPLOAD_FOLDER = 'avatar_ui/static/uploads'\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n@app.route('/')\ndef index():\n    return render_template('index.html', uploaded_image=None)\n@app.route('/upload', methods=['POST'])\ndef upload():\n    if 'image' not in request.files:",
        "detail": "avatar_ui.app",
        "documentation": {}
    },
    {
        "label": "UPLOAD_FOLDER",
        "kind": 5,
        "importPath": "avatar_ui.app",
        "description": "avatar_ui.app",
        "peekOfCode": "UPLOAD_FOLDER = 'avatar_ui/static/uploads'\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n@app.route('/')\ndef index():\n    return render_template('index.html', uploaded_image=None)\n@app.route('/upload', methods=['POST'])\ndef upload():\n    if 'image' not in request.files:\n        return \"No file part\", 400",
        "detail": "avatar_ui.app",
        "documentation": {}
    },
    {
        "label": "app.config['UPLOAD_FOLDER']",
        "kind": 5,
        "importPath": "avatar_ui.app",
        "description": "avatar_ui.app",
        "peekOfCode": "app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n@app.route('/')\ndef index():\n    return render_template('index.html', uploaded_image=None)\n@app.route('/upload', methods=['POST'])\ndef upload():\n    if 'image' not in request.files:\n        return \"No file part\", 400\n    img = request.files['image']\n    print(img)",
        "detail": "avatar_ui.app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "avatar_ui.app_render3d",
        "description": "avatar_ui.app_render3d",
        "peekOfCode": "def index():\n    return render_template('index1.html',avatars=avatars)\nSTATIC_FOLDER = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static')\napp.config['STATIC_FOLDER'] = STATIC_FOLDER\nos.makedirs(os.path.join(STATIC_FOLDER, 'models'), exist_ok=True)\n# This route serves ANY file from the static/models subdirectory, including .glb\n@app.route('/static/models/<path:filename>')\ndef serve_model(filename):\n    print(f\"Serving model file: {filename}\")\n    return send_from_directory(os.path.join(STATIC_FOLDER, 'models'), filename)",
        "detail": "avatar_ui.app_render3d",
        "documentation": {}
    },
    {
        "label": "serve_model",
        "kind": 2,
        "importPath": "avatar_ui.app_render3d",
        "description": "avatar_ui.app_render3d",
        "peekOfCode": "def serve_model(filename):\n    print(f\"Serving model file: {filename}\")\n    return send_from_directory(os.path.join(STATIC_FOLDER, 'models'), filename)\n@app.route('/upload', methods=['POST'])\ndef upload():\n    image = request.files['image']\n    avatar_name = request.form['avatar_name']\n    if image:\n        filename = secure_filename(image.filename)\n        image.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))",
        "detail": "avatar_ui.app_render3d",
        "documentation": {}
    },
    {
        "label": "upload",
        "kind": 2,
        "importPath": "avatar_ui.app_render3d",
        "description": "avatar_ui.app_render3d",
        "peekOfCode": "def upload():\n    image = request.files['image']\n    avatar_name = request.form['avatar_name']\n    if image:\n        filename = secure_filename(image.filename)\n        image.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))\n        avatar_url = url_for('static', filename=f'uploads/{filename}')\n        avatars.append({'name': avatar_name, 'url': avatar_url})\n    return redirect(url_for('index'))\n# @app.route('/get-response', methods=['POST'])",
        "detail": "avatar_ui.app_render3d",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "avatar_ui.app_render3d",
        "description": "avatar_ui.app_render3d",
        "peekOfCode": "app = Flask(__name__)\nUPLOAD_FOLDER = 'avatar_ui/static/uploads'\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n# Get all uploaded avatars and their names\navatars = []    \n@app.route('/')\ndef index():\n    return render_template('index1.html',avatars=avatars)\nSTATIC_FOLDER = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static')",
        "detail": "avatar_ui.app_render3d",
        "documentation": {}
    },
    {
        "label": "UPLOAD_FOLDER",
        "kind": 5,
        "importPath": "avatar_ui.app_render3d",
        "description": "avatar_ui.app_render3d",
        "peekOfCode": "UPLOAD_FOLDER = 'avatar_ui/static/uploads'\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n# Get all uploaded avatars and their names\navatars = []    \n@app.route('/')\ndef index():\n    return render_template('index1.html',avatars=avatars)\nSTATIC_FOLDER = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static')\napp.config['STATIC_FOLDER'] = STATIC_FOLDER",
        "detail": "avatar_ui.app_render3d",
        "documentation": {}
    },
    {
        "label": "app.config['UPLOAD_FOLDER']",
        "kind": 5,
        "importPath": "avatar_ui.app_render3d",
        "description": "avatar_ui.app_render3d",
        "peekOfCode": "app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n# Get all uploaded avatars and their names\navatars = []    \n@app.route('/')\ndef index():\n    return render_template('index1.html',avatars=avatars)\nSTATIC_FOLDER = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static')\napp.config['STATIC_FOLDER'] = STATIC_FOLDER\nos.makedirs(os.path.join(STATIC_FOLDER, 'models'), exist_ok=True)\n# This route serves ANY file from the static/models subdirectory, including .glb",
        "detail": "avatar_ui.app_render3d",
        "documentation": {}
    },
    {
        "label": "avatars",
        "kind": 5,
        "importPath": "avatar_ui.app_render3d",
        "description": "avatar_ui.app_render3d",
        "peekOfCode": "avatars = []    \n@app.route('/')\ndef index():\n    return render_template('index1.html',avatars=avatars)\nSTATIC_FOLDER = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static')\napp.config['STATIC_FOLDER'] = STATIC_FOLDER\nos.makedirs(os.path.join(STATIC_FOLDER, 'models'), exist_ok=True)\n# This route serves ANY file from the static/models subdirectory, including .glb\n@app.route('/static/models/<path:filename>')\ndef serve_model(filename):",
        "detail": "avatar_ui.app_render3d",
        "documentation": {}
    },
    {
        "label": "STATIC_FOLDER",
        "kind": 5,
        "importPath": "avatar_ui.app_render3d",
        "description": "avatar_ui.app_render3d",
        "peekOfCode": "STATIC_FOLDER = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static')\napp.config['STATIC_FOLDER'] = STATIC_FOLDER\nos.makedirs(os.path.join(STATIC_FOLDER, 'models'), exist_ok=True)\n# This route serves ANY file from the static/models subdirectory, including .glb\n@app.route('/static/models/<path:filename>')\ndef serve_model(filename):\n    print(f\"Serving model file: {filename}\")\n    return send_from_directory(os.path.join(STATIC_FOLDER, 'models'), filename)\n@app.route('/upload', methods=['POST'])\ndef upload():",
        "detail": "avatar_ui.app_render3d",
        "documentation": {}
    },
    {
        "label": "app.config['STATIC_FOLDER']",
        "kind": 5,
        "importPath": "avatar_ui.app_render3d",
        "description": "avatar_ui.app_render3d",
        "peekOfCode": "app.config['STATIC_FOLDER'] = STATIC_FOLDER\nos.makedirs(os.path.join(STATIC_FOLDER, 'models'), exist_ok=True)\n# This route serves ANY file from the static/models subdirectory, including .glb\n@app.route('/static/models/<path:filename>')\ndef serve_model(filename):\n    print(f\"Serving model file: {filename}\")\n    return send_from_directory(os.path.join(STATIC_FOLDER, 'models'), filename)\n@app.route('/upload', methods=['POST'])\ndef upload():\n    image = request.files['image']",
        "detail": "avatar_ui.app_render3d",
        "documentation": {}
    },
    {
        "label": "retrieve_response",
        "kind": 2,
        "importPath": "avatar_ui.rag",
        "description": "avatar_ui.rag",
        "peekOfCode": "def retrieve_response(query):\n    docs = vector_store.similarity_search(query, k=1)\n    # print(\"\\n🟢 Retrieved document:\", docs[0].metadata[\"answer\"] if docs else \"None\")\n    return docs[0].metadata[\"answer\"] if docs else \"Sorry, I don't know the answer.\"\n# Load LLaMA model\nllm = Llama(model_path=\"avatar_ui/models/mistral-7b-instruct-v0.1.Q2_K.gguf\",\n            verbose=False)\n# RAG logic\ndef rag_chatbot(query):\n    retrieved_text = retrieve_response(query)",
        "detail": "avatar_ui.rag",
        "documentation": {}
    },
    {
        "label": "rag_chatbot",
        "kind": 2,
        "importPath": "avatar_ui.rag",
        "description": "avatar_ui.rag",
        "peekOfCode": "def rag_chatbot(query):\n    retrieved_text = retrieve_response(query)\n    prompt = (\n        f\"User asked: {query}\\n\\n\"\n        f\"Relevant Info: {retrieved_text}\\n\\n\"\n        f\"Answer: concisely based only on the relevant info above:\"\n    )\n    print(\"\\n🟡 Prompt sent to LLaMA:\\n\", prompt)\n    response = llm(f\"[INST] {prompt} [/INST]\", max_tokens=100, temperature=0.7)\n    print(\"\\n🔵 LLaMA raw response:\\n\", response)",
        "detail": "avatar_ui.rag",
        "documentation": {}
    },
    {
        "label": "get_chat_response",
        "kind": 2,
        "importPath": "avatar_ui.rag",
        "description": "avatar_ui.rag",
        "peekOfCode": "def get_chat_response(prompt):\n    return rag_chatbot(prompt)",
        "detail": "avatar_ui.rag",
        "documentation": {}
    },
    {
        "label": "json_file_path",
        "kind": 5,
        "importPath": "avatar_ui.rag",
        "description": "avatar_ui.rag",
        "peekOfCode": "json_file_path = os.path.join(os.path.dirname(__file__), \"Expertise.json\")\nwith open(json_file_path, \"r\", encoding=\"utf-8\") as f:\n    dataset = json.load(f)\nquestions = [item[\"question\"] for item in dataset]\nanswers = [item[\"answer\"] for item in dataset]\n# Initialize ChromaDB\nchroma_path = os.path.join(\"avatar_ui\", \"chroma_db\")\nchroma_client = chromadb.PersistentClient(path=chroma_path)\n# Load embeddings model\nembeddings = HuggingFaceEmbeddings(",
        "detail": "avatar_ui.rag",
        "documentation": {}
    },
    {
        "label": "questions",
        "kind": 5,
        "importPath": "avatar_ui.rag",
        "description": "avatar_ui.rag",
        "peekOfCode": "questions = [item[\"question\"] for item in dataset]\nanswers = [item[\"answer\"] for item in dataset]\n# Initialize ChromaDB\nchroma_path = os.path.join(\"avatar_ui\", \"chroma_db\")\nchroma_client = chromadb.PersistentClient(path=chroma_path)\n# Load embeddings model\nembeddings = HuggingFaceEmbeddings(\n    model_name=\"sentence-transformers/all-MiniLM-L6-v2\",\n    encode_kwargs={\"batch_size\": 256}\n)",
        "detail": "avatar_ui.rag",
        "documentation": {}
    },
    {
        "label": "answers",
        "kind": 5,
        "importPath": "avatar_ui.rag",
        "description": "avatar_ui.rag",
        "peekOfCode": "answers = [item[\"answer\"] for item in dataset]\n# Initialize ChromaDB\nchroma_path = os.path.join(\"avatar_ui\", \"chroma_db\")\nchroma_client = chromadb.PersistentClient(path=chroma_path)\n# Load embeddings model\nembeddings = HuggingFaceEmbeddings(\n    model_name=\"sentence-transformers/all-MiniLM-L6-v2\",\n    encode_kwargs={\"batch_size\": 256}\n)\n# Store data in ChromaDB",
        "detail": "avatar_ui.rag",
        "documentation": {}
    },
    {
        "label": "chroma_path",
        "kind": 5,
        "importPath": "avatar_ui.rag",
        "description": "avatar_ui.rag",
        "peekOfCode": "chroma_path = os.path.join(\"avatar_ui\", \"chroma_db\")\nchroma_client = chromadb.PersistentClient(path=chroma_path)\n# Load embeddings model\nembeddings = HuggingFaceEmbeddings(\n    model_name=\"sentence-transformers/all-MiniLM-L6-v2\",\n    encode_kwargs={\"batch_size\": 256}\n)\n# Store data in ChromaDB\nvector_store = Chroma.from_texts(\n    texts=questions,",
        "detail": "avatar_ui.rag",
        "documentation": {}
    },
    {
        "label": "chroma_client",
        "kind": 5,
        "importPath": "avatar_ui.rag",
        "description": "avatar_ui.rag",
        "peekOfCode": "chroma_client = chromadb.PersistentClient(path=chroma_path)\n# Load embeddings model\nembeddings = HuggingFaceEmbeddings(\n    model_name=\"sentence-transformers/all-MiniLM-L6-v2\",\n    encode_kwargs={\"batch_size\": 256}\n)\n# Store data in ChromaDB\nvector_store = Chroma.from_texts(\n    texts=questions,\n    metadatas=[{\"answer\": ans} for ans in answers],",
        "detail": "avatar_ui.rag",
        "documentation": {}
    },
    {
        "label": "embeddings",
        "kind": 5,
        "importPath": "avatar_ui.rag",
        "description": "avatar_ui.rag",
        "peekOfCode": "embeddings = HuggingFaceEmbeddings(\n    model_name=\"sentence-transformers/all-MiniLM-L6-v2\",\n    encode_kwargs={\"batch_size\": 256}\n)\n# Store data in ChromaDB\nvector_store = Chroma.from_texts(\n    texts=questions,\n    metadatas=[{\"answer\": ans} for ans in answers],\n    embedding=embeddings,\n    persist_directory=chroma_path",
        "detail": "avatar_ui.rag",
        "documentation": {}
    },
    {
        "label": "vector_store",
        "kind": 5,
        "importPath": "avatar_ui.rag",
        "description": "avatar_ui.rag",
        "peekOfCode": "vector_store = Chroma.from_texts(\n    texts=questions,\n    metadatas=[{\"answer\": ans} for ans in answers],\n    embedding=embeddings,\n    persist_directory=chroma_path\n)\nprint(\"Dataset successfully stored in ChromaDB!\")\n# Function to retrieve response from ChromaDB\ndef retrieve_response(query):\n    docs = vector_store.similarity_search(query, k=1)",
        "detail": "avatar_ui.rag",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "avatar_ui.rag",
        "description": "avatar_ui.rag",
        "peekOfCode": "llm = Llama(model_path=\"avatar_ui/models/mistral-7b-instruct-v0.1.Q2_K.gguf\",\n            verbose=False)\n# RAG logic\ndef rag_chatbot(query):\n    retrieved_text = retrieve_response(query)\n    prompt = (\n        f\"User asked: {query}\\n\\n\"\n        f\"Relevant Info: {retrieved_text}\\n\\n\"\n        f\"Answer: concisely based only on the relevant info above:\"\n    )",
        "detail": "avatar_ui.rag",
        "documentation": {}
    }
]